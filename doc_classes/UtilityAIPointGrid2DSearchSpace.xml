<?xml version="1.0" encoding="UTF-8" ?>
<class name="UtilityAIPointGrid2DSearchSpace" inherits="UtilityAINQSSearchSpaces" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Creates and uses a [Node2D] point grid to define the search space.
	</brief_description>
	<description>
		These nodes create and use a [Node2D] point grid to define the search space. You need to set a [Node2D] parent node where the nodes will be created as child nodes. The points are created relative to the parent node position and will inherit the transformations from the parent node. The parent node will be in the middle of the point grid.
		The points for the grid are created as pairs: a base point and a lattice point.
		For instance in a very dense 2D square grid, there could be a base point every 2x and 1y. This spacing between base points is controlled with the [member point_grid_base_spacing_vector] property. The values of this property also control the density of the grid. The smaller the spacing between points, the more points needs to be created to fill the area/volume given with the [member grid_size] property.
		The lattice point is a point relative to the base point. For the 2D square grid mentioned earlier the [member point_grid_lattice_vector] would be (1,0). This will create the lattice point to the right of the base point.
		During the creation of the point grid the x and y axes are looped through starting from [code]-0.5 * grid_size.x, -0.5 * grid_size.y[/code] and going up to [code]0.5 * grid_size.x, 0.5 * grid_size.y[/code]. On each loop iteration the [member point_grid_base_spacing_vector] x and y components are added to the current position to get the next position for the next pair of points. So on each iteration, both the base point and the lattice point will be added. For 3D grids the z-axis is handled similarly to the x and y axes.
		To get a triangular grid, only the lattice point needs to be moved. If we move it 0.5 units upwards and set the [member point_grid_lattice_vector] to (1,0.5) we would get a grid like in the image below.
		By adjusting the base point spacing and lattice vector values, you can create various types of grids with the density you want.
		[b]Warning:[/b] When creating point grids, it is very easy to create a huge amount of points for a search space.
		Optionally a [NavigationMesh] can be used when the point grid is been queried. Then the points will be placed on the closest point to their grid position on the [NavigationMesh].
		To set a visible debug shape for the point grid, you can create a [Node2D] (or derived node, such as [Sprite2D]) for the [UtilityAIPointGrid2DSearchSpace]. The node should be added as a child node for the search space and its name must be DEBUG.
		The point grid creation method will create two properties for the point grid nodes: [member UtilityAINQSSearchCriteria.score] and [member UtilityAINQSSearchCriteria.is_filtered]. These will be updated for the point grid nodes if the search space property [member UtilityAINQSSearchSpaces.is_run_in_debug_mode] is set in the Debugging property group.
	</description>
	<tutorials>
	</tutorials>
	<members>
		<member name="grid_size" type="Vector2" setter="set_grid_size" getter="get_grid_size" default="Vector2(150, 150)">
			The grid width, height.
		</member>
		<member name="navigation_map_rid" type="RID" setter="set_navigation_map_rid" getter="get_navigation_map_rid" default="RID()">
			See the description of the [member use_navigation_mesh_positions] property.
		</member>
		<member name="offset_vector" type="Vector2" setter="set_offset_vector" getter="get_offset_vector" default="Vector2(0, 0)">
			Optional offset you can apply to the points after they are positioned.
		</member>
		<member name="point_grid" type="Node2D[]" setter="set_point_grid" getter="get_point_grid" default="[]">
			The grid of points as [Node2D] nodes.
		</member>
		<member name="point_grid_base_spacing_vector" type="Vector2" setter="set_point_grid_base_spacing_vector" getter="get_point_grid_base_spacing_vector" default="Vector2(20, 10)">
			The base spacing of the point grid. Defines how rows and columns are created
		</member>
		<member name="point_grid_lattice_type" type="int" setter="set_point_grid_lattice_type" getter="get_point_grid_lattice_type" default="0">
			The lattice type defines how the points are ordered.
		</member>
		<member name="point_grid_lattice_vector" type="Vector2" setter="set_point_grid_lattice_vector" getter="get_point_grid_lattice_vector" default="Vector2(10, 0)">
			The "additional point" which defines the shape of the grid.
		</member>
		<member name="point_grid_parent_node" type="Node2D" setter="set_point_grid_parent_node" getter="get_point_grid_parent_node">
		</member>
		<member name="point_grid_type" type="int" setter="set_point_grid_type" getter="get_point_grid_type" default="0">
			The type of the grid, currently only RECTANGULAR is supported.
		</member>
		<member name="use_navigation_mesh_positions" type="bool" setter="set_use_navigation_mesh_positions" getter="get_use_navigation_mesh_positions" default="true">
			If this is set to true and the [member navigation_map_rid] property is set to a valid navigation map, the point grid positions will be placed on the navigation mesh. Default value is true.
		</member>
	</members>
</class>
